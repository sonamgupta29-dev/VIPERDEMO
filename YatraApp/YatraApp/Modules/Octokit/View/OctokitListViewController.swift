//
//  OctokitListViewController.swift
//  YatraApp
//
//  Created NMG on 16/05/20.
//  Copyright © 2020 Yatra. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import CoreData

class OctokitListViewController: ViewController {
    
    @IBOutlet weak var viewHeader: UIView!
    @IBOutlet weak var tableView: UITableView!
    var presenter: OctokitListPresenterProtocol?
    var isOffline : Bool = false
    lazy var fetchedhResultController: NSFetchedResultsController<NSFetchRequestResult> = {
        let fetchRequest = NSFetchRequest<NSFetchRequestResult>(entityName: String(describing: Repo.self))
        fetchRequest.sortDescriptors = [NSSortDescriptor(key: "name", ascending: true)]
        let frc = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: CoreDataStack.sharedInstance.persistentContainer.viewContext, sectionNameKeyPath: nil, cacheName: nil)
        do {
            try frc.performFetch()
        } catch {
            // Replace this implementation with code to handle the error appropriately.
            // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
            let nserror = error as NSError
            fatalError("Unresolved error \(nserror), \(nserror.userInfo)")
        }
        frc.delegate = self
        return frc
    }()
    override func viewDidLoad() {
        super.viewDidLoad()
        self.navigationController?.isNavigationBarHidden = true
        presenter?.viewDidLoad()
        configureTableview()
    }
    
    private func configureTableview() {
        tableView.tableHeaderView = viewHeader
        tableView.backgroundColor = .clear
        tableView.register(UINib(nibName: "OctokitListTableViewCell", bundle: nil),
                           forCellReuseIdentifier: OctokitListTableViewCell.reuseID)
        tableView.estimatedRowHeight = 40
    }
    
}

extension OctokitListViewController : OctokitListViewProtocol
{
    func showLoader(forPage page: Int) {
        showPageLoader(atPosition: page == 1 ? .page : .bottom)
        
    }
    
    func hideLoader(forPage page: Int) {
        hidePageLoader(atPosition: page == 1 ? .page : .bottom)
        
    }
    
    func showErrorAlert(withError error: Error) {
        showAlert(ofType: .failure, andMessage: error.localizedDescription)
        isOffline = true
        reloadTableview()
    }
    
    func reloadTableview() {
        tableView.reloadData()
    }
    
    
}
extension OctokitListViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if(isOffline)
        {
            if let count = fetchedhResultController.sections?.first?.numberOfObjects {
                return count
            }
            return 0
        }
        else{
            return presenter?.listCount ?? 0
        }
        
    }
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if(isOffline)
        {
            
        }
        else{
            if indexPath.section == 0 && indexPath.row == presenter!.listCount - 1 {
                presenter?.viewDidReachPageEnd()
            }
        }
        
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        
        let cell = tableView.dequeueReusableCell(withIdentifier: OctokitListTableViewCell.reuseID) as! OctokitListTableViewCell
        if(isOffline)
        {
            if let Repo = fetchedhResultController.object(at: indexPath) as? Repo {
                cell.setRepoCellWith(repo: Repo)
            }
        }
        else
        {
            cell.repo = presenter?.data(atIndex: indexPath.row)
        }
        
        return cell
        
    }
    
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    
    
    func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        return true
    }
    
    
}
extension OctokitListViewController: NSFetchedResultsControllerDelegate {
    
    func controller(_ controller: NSFetchedResultsController<NSFetchRequestResult>, didChange anObject: Any, at indexPath: IndexPath?, for type: NSFetchedResultsChangeType, newIndexPath: IndexPath?) {
        
        switch type {
        case .insert:
            self.tableView.insertRows(at: [newIndexPath!], with: .automatic)
        case .delete:
            self.tableView.deleteRows(at: [indexPath!], with: .automatic)
        default:
            break
        }
    }
    
    func controllerDidChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
        self.tableView.endUpdates()
    }
    
    func controllerWillChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
        tableView.beginUpdates()
    }
}
